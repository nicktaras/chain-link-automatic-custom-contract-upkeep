{
	"compiler": {
		"version": "0.8.25+commit.b61c2a91"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "minWaitPeriodSeconds",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "duplicate",
						"type": "address"
					}
				],
				"name": "DuplicateAddress",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidWatchList",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OnlyForwarder",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newAddress",
						"type": "address"
					}
				],
				"name": "ForwarderAddressUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountAdded",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newBalance",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "FundsAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountWithdrawn",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "payee",
						"type": "address"
					}
				],
				"name": "FundsWithdrawn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldMinWaitPeriod",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newMinWaitPeriod",
						"type": "uint256"
					}
				],
				"name": "MinWaitPeriodUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "TopUpFailed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					}
				],
				"name": "TopUpSucceeded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "checkUpkeep",
				"outputs": [
					{
						"internalType": "bool",
						"name": "upkeepNeeded",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "performData",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "targetAddress",
						"type": "address"
					}
				],
				"name": "getAccountInfo",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isActive",
						"type": "bool"
					},
					{
						"internalType": "uint96",
						"name": "minBalanceWei",
						"type": "uint96"
					},
					{
						"internalType": "uint96",
						"name": "topUpAmountWei",
						"type": "uint96"
					},
					{
						"internalType": "uint56",
						"name": "lastTopUpTimestamp",
						"type": "uint56"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getForwarderAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "forwarderAddress",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMinWaitPeriodSeconds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getUnderfundedAddresses",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWatchList",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "performData",
						"type": "bytes"
					}
				],
				"name": "performUpkeep",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "forwarderAddress",
						"type": "address"
					}
				],
				"name": "setForwarderAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "period",
						"type": "uint256"
					}
				],
				"name": "setMinWaitPeriodSeconds",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "addresses",
						"type": "address[]"
					},
					{
						"internalType": "uint96[]",
						"name": "minBalancesWei",
						"type": "uint96[]"
					},
					{
						"internalType": "uint96[]",
						"name": "topUpAmountsWei",
						"type": "uint96[]"
					}
				],
				"name": "setWatchList",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "needsFunding",
						"type": "address[]"
					}
				],
				"name": "topUp",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address payable",
						"name": "payee",
						"type": "address"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"events": {
				"Paused(address)": {
					"details": "Emitted when the pause is triggered by `account`."
				},
				"Unpaused(address)": {
					"details": "Emitted when the pause is lifted by `account`."
				}
			},
			"kind": "dev",
			"methods": {
				"checkUpkeep(bytes)": {
					"returns": {
						"upkeepNeeded": "signals if upkeep is needed, performData is an abi encoded list of addresses that need funds"
					}
				},
				"constructor": {
					"params": {
						"minWaitPeriodSeconds": "The minimum wait period for addresses between funding"
					}
				},
				"getUnderfundedAddresses()": {
					"returns": {
						"_0": "list of addresses that are underfunded"
					}
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"performUpkeep(bytes)": {
					"params": {
						"performData": "The abi encoded list of addresses to fund"
					}
				},
				"setWatchList(address[],uint96[],uint96[])": {
					"params": {
						"addresses": "the list of addresses to watch",
						"minBalancesWei": "the minimum balances for each address",
						"topUpAmountsWei": "the amount to top up each address"
					}
				},
				"topUp(address[])": {
					"params": {
						"needsFunding": "the list of addresses to fund (addresses must be pre-approved)"
					}
				},
				"withdraw(uint256,address)": {
					"params": {
						"amount": "The amount of eth (in wei) to withdraw",
						"payee": "The address to pay"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptOwnership()": {
					"notice": "Allows an ownership transfer to be completed by the recipient."
				},
				"checkUpkeep(bytes)": {
					"notice": "Get list of addresses that are underfunded and return payload compatible with Chainlink Automation Network"
				},
				"getAccountInfo(address)": {
					"notice": "Gets configuration information for an address on the watchlist"
				},
				"getForwarderAddress()": {
					"notice": "Gets the forwarder address of the Chainlink Automation upkeep"
				},
				"getMinWaitPeriodSeconds()": {
					"notice": "Gets the minimum wait period"
				},
				"getUnderfundedAddresses()": {
					"notice": "Gets a list of addresses that are under funded"
				},
				"getWatchList()": {
					"notice": "Gets the list of addresses being watched"
				},
				"owner()": {
					"notice": "Get the current owner"
				},
				"pause()": {
					"notice": "Pauses the contract, which prevents executing performUpkeep"
				},
				"performUpkeep(bytes)": {
					"notice": "Called by Chainlink Automation Node to send funds to underfunded addresses"
				},
				"setForwarderAddress(address)": {
					"notice": "Sets the upkeep's unique forwarder address for upkeeps in Automation versions 2.0 and later https://docs.chain.link/chainlink-automation/guides/forwarder"
				},
				"setMinWaitPeriodSeconds(uint256)": {
					"notice": "Sets the minimum wait period (in seconds) for addresses between funding"
				},
				"setWatchList(address[],uint96[],uint96[])": {
					"notice": "Sets the list of addresses to watch and their funding parameters"
				},
				"topUp(address[])": {
					"notice": "Send funds to the addresses provided"
				},
				"transferOwnership(address)": {
					"notice": "Allows an owner to begin transferring ownership to a new address."
				},
				"unpause()": {
					"notice": "Unpauses the contract"
				},
				"withdraw(uint256,address)": {
					"notice": "Withdraws the contract balance"
				}
			},
			"notice": "THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY. THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE. DO NOT USE THIS CODE IN PRODUCTION.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"docs.chain.link/samples/Automation/tutorials/EthBalanceMonitor.sol": "EthBalanceMonitor"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts@1.1.0/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
			"keccak256": "0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340",
			"license": "MIT",
			"urls": [
				"bzz-raw://b738dba680a6fbc4afc85819743f13f5b7f4790ec8634c9894e1160327b11b6e",
				"dweb:/ipfs/Qmbv3euvQppeBm2g61khcJSRMZWi78xUWzbnjKAvDBnka4"
			]
		},
		"@chainlink/contracts@1.1.0/src/v0.8/shared/access/ConfirmedOwner.sol": {
			"keccak256": "0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861",
			"license": "MIT",
			"urls": [
				"bzz-raw://f914a1b638300e82d8f5a020a4195235599afebab4ef1e10c6992f3c90e7df3e",
				"dweb:/ipfs/Qmf2MbuVB16qbCGii3U5cjcBvVjAHHYzKp9voJa2eDch9B"
			]
		},
		"@chainlink/contracts@1.1.0/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol": {
			"keccak256": "0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8",
			"license": "MIT",
			"urls": [
				"bzz-raw://fde3b9ac3a4c42ea43e2f92b037d32ab20e30818471c6e20d2590147a6c2958a",
				"dweb:/ipfs/QmQ2ohQP4GnhPUsiWCvCfb1dsoGYDdxSap3dxtnYTV4rmT"
			]
		},
		"@chainlink/contracts@1.1.0/src/v0.8/shared/interfaces/IOwnable.sol": {
			"keccak256": "0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767",
			"license": "MIT",
			"urls": [
				"bzz-raw://17c636625a5d29a140612db496d2cca9fb4b48c673adb0fd7b3957d287e75921",
				"dweb:/ipfs/QmNoBX8TY424bdQWyQC7y3kpKfgxyWxhLw7KEhhEEoBN9q"
			]
		},
		"@openzeppelin/contracts/security/Pausable.sol": {
			"keccak256": "0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ddabb16009cd17eaca3143feadf450ac13e72919ebe2ca50e00f61cb78bc004",
				"dweb:/ipfs/QmSPwPxX7d6TTWakN5jy5wsaGkS1y9TW8fuhGSraMkLk2B"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"docs.chain.link/samples/Automation/tutorials/EthBalanceMonitor.sol": {
			"keccak256": "0x4bff05152b2207603e2cc94a964026f2330247f3e3fbaca87313782ad446a1d7",
			"license": "MIT",
			"urls": [
				"bzz-raw://b88627e224a02f05b0cd70f2c1777de603806da1503e4a4afcc1bf2af290fc51",
				"dweb:/ipfs/QmPjAcuBDQoTBTwW99gn6LKMDnTE7pyfRkM85wZAcHpmsu"
			]
		}
	},
	"version": 1
}